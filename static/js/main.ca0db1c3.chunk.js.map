{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Container/Container.module.css","components/ContactItem/ContactItem.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","container","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","id","shortid","generate","post","deleteContact","contactId","delete","itemsReducer","createReducer","_","payload","state","filter","filterReducer","loadingReducer","contactsReducer","combineReducers","items","loading","getContacts","contacts","getFilter","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","getContactsNames","reduce","allNames","push","ContactForm","useState","setName","setNumber","contactsNames","useSelector","contactsSelectors","useDispatch","handleChange","target","value","reset","onSubmit","event","preventDefault","alert","form","label","type","input","onChange","autoComplete","button","disabled","Filter","contactsActions","ContactItem","btnDelete","onClick","ContactList","useEffect","contactList","length","map","contactItem","App","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0db1c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3bXkj\",\"input\":\"Filter_input__VJk0N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2kNuE\",\"contactItem\":\"ContactList_contactItem__GojiG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__pxMnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactItem_btnDelete__zGBs7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1sqAZ\",\"label\":\"ContactForm_label__26Gb8\",\"input\":\"ContactForm_input__25kCr\",\"button\":\"ContactForm_button__3FYcN\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n    return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n    children: PropTypes.node,\n};\n","import { createAction } from '@reduxjs/toolkit';\n\n// начальный запрос контактов\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n    'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n    'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport shortid from 'shortid';\nimport {\n    fetchContactRequest,\n    fetchContactSuccess,\n    fetchContactError,\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:5050';\n\nconst fetchContacts = () => async dispatch => {\n    dispatch(fetchContactRequest());\n\n    try {\n        const { data } = await axios.get('/contacts');\n        dispatch(fetchContactSuccess(data));\n    } catch (error) {\n        dispatch(fetchContactError(error));\n    }\n};\n\nconst addContact = (name, number) => async dispatch => {\n    const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n    };\n\n    dispatch(addContactRequest());\n\n    try {\n        const { data } = await axios.post('/contacts', contact);\n        dispatch(addContactSuccess(data));\n    } catch (error) {\n        dispatch(addContactError(error));\n    }\n};\n\nconst deleteContact = contactId => async dispatch => {\n    dispatch(deleteContactRequest());\n\n    try {\n        await axios.delete(`/contacts/${contactId}`);\n        dispatch(deleteContactSuccess(contactId));\n    } catch (error) {\n        dispatch(deleteContactError(error));\n    }\n};\n\nconst contactsOperations = {\n    fetchContacts,\n    addContact,\n    deleteContact,\n};\nexport default contactsOperations;\n\n// без async await !!!\n\n// const fetchContacts = () => dispatch => {\n//     dispatch(fetchContactRequest());\n\n//     axios\n//         .get('/contacts')\n//         .then(({ data }) => dispatch(fetchContactSuccess(data)))\n//         .catch(error => dispatch(fetchContactError(error)));\n// };\n\n// const addContact = (name, number) => dispatch => {\n//     const contact = {\n//         id: shortid.generate(),\n//         name,\n//         number,\n//     };\n\n//     dispatch(addContactRequest());\n\n//     axios\n//         .post('/contacts', contact)\n//         .then(({ data }) => dispatch(addContactSuccess(data)))\n//         .catch(error => dispatch(addContactError(error)));\n// };\n\n// const deleteContact = contactId => dispatch => {\n//     dispatch(deleteContactRequest());\n\n//     axios\n//         .delete(`/contacts/${contactId}`)\n//         .then(dispatch(deleteContactSuccess(contactId)))\n//         .catch(error => dispatch(deleteContactError(error)));\n// };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n    fetchContactRequest,\n    fetchContactSuccess,\n    fetchContactError,\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    changeFilter,\n} from './contacts-actions';\n\nconst itemsReducer = createReducer([], {\n    [fetchContactSuccess]: (_, { payload }) => payload,\n    [addContactSuccess]: (state, { payload }) => [payload, ...state],\n    [deleteContactSuccess]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loadingReducer = createReducer(false, {\n    [fetchContactRequest]: () => true,\n    [fetchContactSuccess]: () => false,\n    [fetchContactError]: () => false,\n    [addContactRequest]: () => true,\n    [addContactSuccess]: () => false,\n    [addContactError]: () => false,\n    [deleteContactRequest]: () => true,\n    [deleteContactSuccess]: () => false,\n    [deleteContactError]: () => false,\n});\n\n// можна обрабатывать ошибку и показывать что-то в интерфейсе, типа error.message\n// const errorReducer = createReducer(null, {});\n\nconst contactsReducer = combineReducers({\n    items: itemsReducer,\n    filter: filterReducer,\n    loading: loadingReducer,\n    // error: errorReducer,\n});\n\nexport default contactsReducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n\nexport const getContactsNames = createSelector([getContacts], contacts => {\n    return contacts.reduce((allNames, { name }) => {\n        allNames.push(name.toLowerCase());\n        return allNames;\n    }, []);\n});\n\n// без мемоизации (библиотека Reselect)\n\n// export const getVisibleContacts = state => {\n//     const contacts = getContacts(state);\n//     const filter = getFilter(state);\n\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(normalizedFilter),\n//     );\n// };\n\n// export const getContactsNames = state => {\n//     const contacts = getContacts(state);\n\n//     return contacts.reduce((allNames, { name }) => {\n//         allNames.push(name.toLowerCase());\n//         return allNames;\n//     }, []);\n// };\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contactsNames = useSelector(contactsSelectors.getContactsNames);\n    const dispatch = useDispatch();\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n\n            case 'number':\n                setNumber(value);\n                break;\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (contactsNames.includes(name.toLowerCase())) {\n            alert(`${name} is already in contacts`);\n            return;\n        }\n\n        // 2-ой вариант поиска существующего имени\n        // if (\n        //     contacts.find(\n        //         contact => contact.name.toLowerCase() === name.toLowerCase(),\n        //     )\n        // ) {\n        //     alert(`${name} is already in contacts`);\n        //     return;\n        // }\n\n        dispatch(contactsOperations.addContact(name, number));\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>\n                Name\n                <input\n                    type=\"text\"\n                    className={s.input}\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                />\n            </label>\n            <label className={s.label}>\n                Number\n                <input\n                    type=\"tel\"\n                    className={s.input}\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                />\n            </label>\n            <button\n                type=\"submit\"\n                className={s.button}\n                disabled={name === '' || number === ''}\n            >\n                Add contact\n            </button>\n        </form>\n    );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport s from './Filter.module.css';\nimport { contactsActions, contactsSelectors } from 'redux/contacts';\n\nconst Filter = () => {\n    const value = useSelector(contactsSelectors.getFilter);\n    const dispatch = useDispatch();\n\n    return (\n        <label className={s.label}>\n            Find contacts by name\n            <input\n                type=\"text\"\n                className={s.input}\n                value={value}\n                onChange={event =>\n                    dispatch(contactsActions.changeFilter(event.target.value))\n                }\n                autoComplete=\"off\"\n            />\n        </label>\n    );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactItem.module.css';\nimport { contactsOperations } from 'redux/contacts';\n\nconst ContactItem = ({ name, number, id }) => {\n    const dispatch = useDispatch();\n\n    return (\n        <>\n            {name}: {number}\n            <button\n                type=\"button\"\n                className={s.btnDelete}\n                onClick={() => dispatch(contactsOperations.deleteContact(id))}\n            >\n                Delete\n            </button>\n        </>\n    );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './ContactList.module.css';\nimport ContactItem from 'components/ContactItem';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nconst ContactList = () => {\n    const contacts = useSelector(contactsSelectors.getVisibleContacts);\n    const loading = useSelector(contactsSelectors.getLoading);\n    const dispatch = useDispatch();\n\n    useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n    return (\n        <ul className={s.contactList}>\n            {/* отображает отсутствие контаков */}\n            {contacts.length === 0 && <p>No contacts</p>}\n\n            {/* отображает загрузку контаков */}\n            {loading && <p>Loading contacts ...</p>}\n\n            {contacts.map(({ id, name, number }) => (\n                <li key={id} className={s.contactItem}>\n                    <ContactItem name={name} number={number} id={id} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default ContactList;\n","import Container from 'components/Container';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nconst App = () => (\n    <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </Container>\n);\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { contactsReducer } from './contacts';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'index.css';\nimport App from 'App';\nimport store from 'redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}
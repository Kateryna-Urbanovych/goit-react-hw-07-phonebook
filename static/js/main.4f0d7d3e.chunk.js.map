{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Container/Container.module.css","components/ContactItem/ContactItem.module.css","components/Container/Container.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","s","container","changeFilter","createAction","axios","defaults","baseURL","contactsOperations","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","contact","post","deleteContact","contactId","delete","itemsReducer","createReducer","fulfilled","payload","state","filter","id","filterReducer","loadingReducer","pending","rejected","contactsReducer","combineReducers","items","loading","getContacts","contacts","getFilter","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","getContactsNames","reduce","allNames","push","ContactForm","useState","setName","number","setNumber","contactsNames","useSelector","contactsSelectors","dispatch","useDispatch","handleChange","target","value","reset","onSubmit","event","preventDefault","alert","form","label","type","input","onChange","autoComplete","button","disabled","Filter","contactsActions","ContactItem","btnDelete","onClick","ContactList","useEffect","contactList","length","map","contactItem","App","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f0d7d3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3bXkj\",\"input\":\"Filter_input__VJk0N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2kNuE\",\"contactItem\":\"ContactList_contactItem__GojiG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__pxMnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactItem_btnDelete__zGBs7\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n    return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n    children: PropTypes.node,\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:5050';\n\nconst fetchContacts = createAsyncThunk(\n    'contacts/fetchContacts',\n    async (_, { rejectWithValue }) => {\n        try {\n            const { data } = await axios.get('/contacts');\n            return data;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    },\n);\n\nconst addContact = createAsyncThunk(\n    'contacts/addContact',\n    async (contact, { rejectWithValue }) => {\n        try {\n            const { data } = await axios.post('/contacts', contact);\n            return data;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    },\n);\n\nconst deleteContact = createAsyncThunk(\n    'contacts/deleteContact',\n    async (contactId, { rejectWithValue }) => {\n        try {\n            await axios.delete(`/contacts/${contactId}`);\n            return contactId;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    },\n);\n\nconst contactsOperations = {\n    fetchContacts,\n    addContact,\n    deleteContact,\n};\nexport default contactsOperations;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { changeFilter } from './contacts-actions';\nimport contactsOperations from './contacts-operations';\n\nconst { fetchContacts, addContact, deleteContact } = contactsOperations;\n\nconst itemsReducer = createReducer([], {\n    [fetchContacts.fulfilled]: (_, { payload }) => payload,\n    [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n    [deleteContact.fulfilled]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loadingReducer = createReducer(false, {\n    [fetchContacts.pending]: () => true,\n    [fetchContacts.fulfilled]: () => false,\n    [fetchContacts.rejected]: () => false,\n    [addContact.pending]: () => true,\n    [addContact.fulfilled]: () => false,\n    [addContact.rejected]: () => false,\n    [deleteContact.pending]: () => true,\n    [deleteContact.fulfilled]: () => false,\n    [deleteContact.rejected]: () => false,\n});\n\n// можна обрабатывать ошибку и показывать что-то в интерфейсе, типа error.message\n// const errorReducer = createReducer(null, {});\n\nconst contactsReducer = combineReducers({\n    items: itemsReducer,\n    filter: filterReducer,\n    loading: loadingReducer,\n    // error: errorReducer,\n});\n\nexport default contactsReducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n\nexport const getContactsNames = createSelector([getContacts], contacts => {\n    return contacts.reduce((allNames, { name }) => {\n        allNames.push(name.toLowerCase());\n        return allNames;\n    }, []);\n});\n\n// без мемоизации (библиотека Reselect)\n\n// export const getVisibleContacts = state => {\n//     const contacts = getContacts(state);\n//     const filter = getFilter(state);\n\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(normalizedFilter),\n//     );\n// };\n\n// export const getContactsNames = state => {\n//     const contacts = getContacts(state);\n\n//     return contacts.reduce((allNames, { name }) => {\n//         allNames.push(name.toLowerCase());\n//         return allNames;\n//     }, []);\n// };\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contactsNames = useSelector(contactsSelectors.getContactsNames);\n    const dispatch = useDispatch();\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n\n            case 'number':\n                setNumber(value);\n                break;\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (contactsNames.includes(name.toLowerCase())) {\n            alert(`${name} is already in contacts`);\n            return;\n        }\n\n        // 2-ой вариант поиска существующего имени\n        // if (\n        //     contacts.find(\n        //         contact => contact.name.toLowerCase() === name.toLowerCase(),\n        //     )\n        // ) {\n        //     alert(`${name} is already in contacts`);\n        //     return;\n        // }\n        const contact = { name, number };\n        dispatch(contactsOperations.addContact(contact));\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>\n                Name\n                <input\n                    type=\"text\"\n                    className={s.input}\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                />\n            </label>\n            <label className={s.label}>\n                Number\n                <input\n                    type=\"tel\"\n                    className={s.input}\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                />\n            </label>\n            <button\n                type=\"submit\"\n                className={s.button}\n                disabled={name === '' || number === ''}\n            >\n                Add contact\n            </button>\n        </form>\n    );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport s from './Filter.module.css';\nimport { contactsActions, contactsSelectors } from 'redux/contacts';\n\nconst Filter = () => {\n    const value = useSelector(contactsSelectors.getFilter);\n    const dispatch = useDispatch();\n\n    return (\n        <label className={s.label}>\n            Find contacts by name\n            <input\n                type=\"text\"\n                className={s.input}\n                value={value}\n                onChange={event =>\n                    dispatch(contactsActions.changeFilter(event.target.value))\n                }\n                autoComplete=\"off\"\n            />\n        </label>\n    );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactItem.module.css';\nimport { contactsOperations } from 'redux/contacts';\n\nconst ContactItem = ({ name, number, id }) => {\n    const dispatch = useDispatch();\n\n    return (\n        <>\n            {name}: {number}\n            <button\n                type=\"button\"\n                className={s.btnDelete}\n                onClick={() => dispatch(contactsOperations.deleteContact(id))}\n            >\n                Delete\n            </button>\n        </>\n    );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './ContactList.module.css';\nimport ContactItem from 'components/ContactItem';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nconst ContactList = () => {\n    const contacts = useSelector(contactsSelectors.getVisibleContacts);\n    const loading = useSelector(contactsSelectors.getLoading);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <ul className={s.contactList}>\n            {/* отображает отсутствие контаков */}\n            {contacts.length === 0 && <p>No contacts</p>}\n\n            {/* отображает загрузку контаков */}\n            {loading && <p>Loading contacts ...</p>}\n\n            {contacts.map(({ id, name, number }) => (\n                <li key={id} className={s.contactItem}>\n                    <ContactItem name={name} number={number} id={id} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default ContactList;\n","import Container from 'components/Container';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nconst App = () => (\n    <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </Container>\n);\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { contactsReducer } from './contacts';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'index.css';\nimport App from 'App';\nimport store from 'redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1sqAZ\",\"label\":\"ContactForm_label__26Gb8\",\"input\":\"ContactForm_input__25kCr\",\"button\":\"ContactForm_button__3FYcN\"};"],"sourceRoot":""}